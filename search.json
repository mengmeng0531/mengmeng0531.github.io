[{"title":"用spring boot 开发一个网站的大纲","url":"/2023/03/08/1%20(1)/","content":"确定网站功能和需求，进行系统设计和架构规划。选择并配置数据库，例如 MySQL 或 PostgreSQL，以及数据库访问框架，例如 Spring Data JPA 或 MyBatis。选择并配置 Web 服务器，例如 Tomcat 或 Jetty，以及 Spring Boot 内嵌的服务器。选择并配置 Web 开发框架，例如 Spring MVC 或 Spring WebFlux，用于处理 HTTP 请求和响应。设计和实现数据模型和数据访问层，包括实体类、DAO 接口和实现类，以及相关的 SQL 或 JPQL 查询语句。设计和实现业务逻辑层，包括 Service 层和相关的业务方法和逻辑处理。设计和实现控制器层，包括 Controller 类和相关的请求映射方法，用于处理 HTTP 请求和返回响应。设计和实现视图层，包括模板引擎、静态页面或前端框架，以及相关的 HTML、CSS 和 JavaScript 代码。配置安全框架，例如 Spring Security，用于保护网站资源和处理用户认证和授权。配置日志框架，例如 Log4j 或 Logback，用于记录系统日志和错误信息。配置缓存框架，例如 Ehcache 或 Redis，用于提高系统性能和响应速度。配置测试框架，例如 JUnit 或 TestNG，用于编写和运行单元测试、集成测试和系统测试。部署网站到生产环境，例如云服务器或自建服务器，配置环境变量和启动脚本。以上是使用 Spring Boot 开发网站的大体步骤和流程。具体的实现过程和技术细节可能因项目需求和开发人员经验而异。\n","tags":["spring"]},{"title":"How do I make an HTTP request in Javascript?","url":"/2023/03/08/1%20(10)/","content":"To make an HTTP request in JavaScript, you can use the built-in XMLHttpRequest object or the newer fetch() API. Here are examples of how to use each method:\nUsing XMLHttpRequest:\nconst xhr &#x3D; new XMLHttpRequest();\nxhr.open(‘GET’, ‘https://example.com/api/data‘);xhr.send();\nxhr.onload &#x3D; () &#x3D;&gt; {  if (xhr.status &#x3D;&#x3D;&#x3D; 200) {    console.log(xhr.responseText);  } else {    console.error(Request failed.  Returned status of $&#123;xhr.status&#125;);  }};\nUsing fetch:\nfetch(‘https://example.com/api/data‘)  .then(response &#x3D;&gt; {    if (response.ok) {      return response.text();    }    throw new Error(‘Network response was not ok.’);  })  .then(data &#x3D;&gt; {    console.log(data);  })  .catch(error &#x3D;&gt; {    console.error(‘There was a problem with the fetch operation:’, error);  });\nBoth of these methods use the GET method to retrieve data from the specified URL. If you need to use a different HTTP method or include request parameters, you can modify the code accordingly.\n"},{"title":"java  如何定义一个数组","url":"/2023/03/08/1%20(2)/","content":"&#x2F;&#x2F; 定义一个整型数组，数组名为numbers，包含5个元素int[] numbers &#x3D; new int[5];\n&#x2F;&#x2F; 定义一个字符串数组，数组名为names，包含3个元素String[] names &#x3D; new String[3];\n&#x2F;&#x2F; 定义一个双精度浮点型数组，数组名为doubles，包含10个元素double[] doubles &#x3D; new double[10];\n在上述示例中，[]表示这是一个数组类型的变量。要定义一个数组，需要指定数组的类型和大小。数组的大小指定了数组中元素的个数。在这些示例中，数组中元素的个数分别为5、3和10。可以根据需要调整数组大小。\n要访问数组中的元素，可以使用数组名和元素的下标。数组的第一个元素的下标为0，最后一个元素的下标为数组大小减1。例如，要访问numbers数组的第三个元素，可以使用numbers[2]。\n"},{"title":"springboot和springmvc的区别","url":"/2023/03/08/1%20(11)/","content":"springmvc与springboot的联系和区别：联系： Spring最初利用工厂模式（DI)和代理模式解耦应用组件，为了解耦开发了springmvc；而实际开发过程中，经常会使用到注解，程序的样板很多，于是开发了starter，这套就是springboot。区别：1.springboot是约定大于配置，可以简化spring的配置流程；springmvc是基于servlet的mvc框架，个人感觉少了model中的映射。2.以前web应用要使用到tomat服务器启动，而springboot内置服务器容器，通过@SpringBootApplication中注解类中main函数启动即可。\nspring的原理和组成：Spring为简化我们的开发工作，封装了一系列的开箱即用的组件功能模块，包括：Spring JDBC 、Spring MVC 、Spring Security、 Spring AOP 、Spring ORM 、Spring Test等————————————————\n"},{"title":"java 根据用户输入一段文字里的关键字进行交互","url":"/2023/03/08/1%20(5)/","content":"您可以使用Java中的Scanner类来获取用户输入的文本，并使用字符串的contains()方法检查文本中是否包含关键字。以下是一个简单的示例代码，演示如何实现这个交互：import java.util.Scanner;\npublic class KeywordInteraction {    public static void main(String[] args) {        Scanner scanner &#x3D; new Scanner(System.in);        System.out.println(“请输入一段文本：”);        String inputText &#x3D; scanner.nextLine();        System.out.println(“请输入要查找的关键字：”);        String keyword &#x3D; scanner.nextLine();\n    if (inputText.contains(keyword)) &#123;\n        System.out.println(&quot;输入的文本中包含关键字 \\&quot;&quot; + keyword + &quot;\\&quot;&quot;);\n    &#125; else &#123;\n        System.out.println(&quot;输入的文本中不包含关键字 \\&quot;&quot; + keyword + &quot;\\&quot;&quot;);\n    &#125;\n&#125;\n\n}\n在这个示例中，首先使用Scanner类获取用户输入的文本和关键字。然后使用字符串的contains()方法检查输入文本中是否包含关键字。如果包含，程序会输出相应的提示信息。否则，程序会输出另一个提示信息。\n"},{"title":"java 如果控制台输入 你好，打印 我不好","url":"/2023/03/08/1%20(3)/","content":"import java.util.Scanner;\npublic class Greeting {  public static void main(String[] args) {    &#x2F;&#x2F; 创建一个Scanner对象，用于接收控制台输入    Scanner scanner &#x3D; new Scanner(System.in);\n// 提示用户输入内容\nSystem.out.print(&quot;请输入您的问候：&quot;);\n\n// 读取用户输入的内容\nString greeting = scanner.nextLine();\n\n// 判断用户输入的内容是否为&quot;你好&quot;\nif (greeting.equals(&quot;你好&quot;)) &#123;\n  System.out.println(&quot;我不好&quot;);\n&#125;\n\n  }}\n上述代码通过使用Scanner类读取控制台输入，并使用if语句检查用户输入的内容是否等于“你好”，如果是，就打印“我不好”。\n"},{"title":"java 输入一段文字，如果文字内容中含有规定的需要屏蔽的词，就打印 ”根据相关法规，该内容无法显示“","url":"/2023/03/08/1%20(4)/","content":"import java.util.Scanner;\npublic class TextFilter {    public static void main(String[] args) {        &#x2F;&#x2F; 创建一个Scanner对象，用于接收控制台输入        Scanner scanner &#x3D; new Scanner(System.in);\n    // 提示用户输入内容\n    System.out.print(&quot;请输入文本内容：&quot;);\n\n    // 读取用户输入的内容\n    String text = scanner.nextLine();\n\n    // 检查文本内容是否包含需要屏蔽的词\n    if (hasSensitiveWords(text)) &#123;\n        System.out.println(&quot;根据相关法规，该内容无法显示&quot;);\n    &#125; else &#123;\n        System.out.println(&quot;文本内容为：&quot; + text);\n    &#125;\n&#125;\n\n// 检查文本内容是否包含需要屏蔽的词的方法\npublic static boolean hasSensitiveWords(String text) &#123;\n    // 这里假设需要屏蔽的词为&quot;敏感词&quot;\n    return text.contains(&quot;敏感词&quot;);\n&#125;\n\n}\n在上述代码中，我们定义了一个名为hasSensitiveWords的方法，用于检查文本内容是否包含需要屏蔽的词。在main方法中，我们读取用户输入的文本内容，并调用hasSensitiveWords方法来检查文本内容是否包含敏感词。如果包含敏感词，就输出提示信息；否则，就输出文本内容。您可以将需要屏蔽的词改成您所需要的内容。\n"},{"title":"java 一个包里可以有多个main 方法吗？","url":"/2023/03/08/1%20(6)/","content":"在Java中，每个程序都必须有一个入口点，这个入口点是一个名为”main”的方法。因此，对于一个Java包来说，每个类都可以定义自己的”main”方法。也就是说，一个包中可以有多个类，每个类都可以定义自己的”main”方法。\n但是，当你想要运行一个Java程序时，你需要指定入口点的类和方法。你只能运行一个类中的一个”main”方法。如果你指定了多个类中的”main”方法，Java编译器将无法确定应该运行哪一个方法。\n因此，每个Java程序应该只有一个入口点，也就是说，每个程序只应该有一个”main”方法。如果你想要在一个程序中定义多个入口点，你可以使用不同的类来实现。\n"},{"title":"java 写一个程序，键盘输入6 个数，然后从小到大排序","url":"/2023/03/08/1%20(7)/","content":"以下是Java语言实现的程序，可以通过键盘输入6个数，然后按照从小到大的顺序进行排序：\nimport java.util.Scanner;import java.util.Arrays;\npublic class Main {    public static void main(String[] args) {        Scanner input &#x3D; new Scanner(System.in);\n    int[] nums = new int[6];\n\n    System.out.println(&quot;请输入6个整数：&quot;);\n    for (int i = 0; i &lt; 6; i++) &#123;\n        nums[i] = input.nextInt();\n    &#125;\n\n    Arrays.sort(nums);\n\n    System.out.println(&quot;从小到大排序后的结果为：&quot;);\n    for (int i = 0; i &lt; 6; i++) &#123;\n        System.out.print(nums[i] + &quot; &quot;);\n    &#125;\n&#125;\n\n}\n首先，程序创建了一个长度为6的整型数组 nums，用于存储输入的6个整数。然后，通过 Scanner 类读取用户输入的整数，并将其存储在数组中。\n接着，使用 Java 内置的 Arrays.sort() 方法对数组进行从小到大的排序。最后，遍历排好序的数组并逐个输出结果。\n"},{"title":"java 键盘键入数字存起来","url":"/2023/03/08/1%20(8)/","content":"要存储从键盘输入的数字，您需要使用 Java 中的Scanner类来读取输入，并将读取的数字存储在变量中。以下是一个示例代码片段，可以帮助您实现这个功能：\nimport java.util.Scanner;\npublic class Main {    public static void main(String[] args) {        Scanner scanner &#x3D; new Scanner(System.in);        int number;\n    System.out.print(&quot;请输入一个整数：&quot;);\n    number = scanner.nextInt();\n\n    System.out.println(&quot;您输入的整数是：&quot; + number);\n&#125;\n\n}\n在上面的代码中，我们首先导入了java.util.Scanner类。接下来，在main方法中，我们创建了一个Scanner对象并将其与标准输入流System.in关联。然后，我们定义了一个整数类型的变量number，以存储从键盘读取的数字。\n接下来，我们使用System.out.print方法打印出提示消息，要求用户输入一个整数。然后，使用scanner.nextInt()方法读取用户输入的整数，并将其存储在number变量中。\n最后，我们使用System.out.println方法打印出用户输入的整数。您可以根据需要修改此代码片段，以适应您的具体需求。\n"},{"title":"将整数换成文字","url":"/2023/03/08/1%20(9)/","content":"如果您想将用户从键盘输入的整数转换为文字表示，您可以使用Java的NumberFormat类或其他第三方库，例如Apache Commons Lang中的NumberUtils类。\n以下是使用Java的NumberFormat类实现此功能的示例代码：\nimport java.text.NumberFormat;import java.util.Scanner;\npublic class Main {    public static void main(String[] args) {        int number &#x3D; readIntegerFromConsole();        String numberInWords &#x3D; convertNumberToWords(number);        System.out.println(“您输入的整数是：” + numberInWords);    }\npublic static int readIntegerFromConsole() &#123;\n    Scanner scanner = new Scanner(System.in);\n    System.out.print(&quot;请输入一个整数：&quot;);\n    int number = scanner.nextInt();\n    return number;\n&#125;\n\npublic static String convertNumberToWords(int number) &#123;\n    NumberFormat format = NumberFormat.getInstance();\n    return format.format(number);\n&#125;\n\n}\n在上面的代码中，我们定义了一个名为convertNumberToWords的方法，该方法使用NumberFormat类将整数转换为文本表示。NumberFormat.getInstance()方法返回一个默认的NumberFormat对象，它可以将数字格式化为本地语言的文本表示形式。在这个示例中，我们将返回的文本表示直接作为字符串返回。\n在main方法中，我们首先使用readIntegerFromConsole方法读取用户输入的整数。然后，我们使用convertNumberToWords方法将整数转换为文本表示。最后，我们使用System.out.println方法打印出用户输入的整数的文本表示形式。\n请注意，使用NumberFormat类将整数转换为文本表示形式时，您可能需要在方法中处理NumberFormatException异常，以便在用户输入无效数字时进行错误处理。\n"},{"title":"Java 实现汉诺塔游戏的代码示例","url":"/2023/03/08/1/","content":"\npublic class HanoiTower &#123;\n\n    public static void main(String[] args) &#123;\n        int n = 3; // 汉诺塔的层数\n        char from = 'A'; // 源柱子的名称\n        char to = 'C'; // 目标柱子的名称\n        char temp = 'B'; // 辅助柱子的名称\n\n        move(n, from, to, temp);\n    &#125;\n\n    /**\n     * 汉诺塔移动函数\n     *\n     * @param n     汉诺塔的层数\n     * @param from  源柱子的名称\n     * @param to    目标柱子的名称\n     * @param temp  辅助柱子的名称\n     */\n    public static void move(int n, char from, char to, char temp) &#123;\n        if (n == 1) &#123;\n            System.out.println(from + \" -> \" + to);\n            return;\n        &#125;\n\n        move(n - 1, from, temp, to); // 将 n-1 个盘子从源柱子移动到辅助柱子\n        System.out.println(from + \" -> \" + to); // 将最底下的盘子从源柱子移动到目标柱子\n        move(n - 1, temp, to, from); // 将 n-1 个盘子从辅助柱子移动到目标柱子\n    &#125;\n&#125;\n\n在此示例中，move() 函数是一个递归函数，它将从源柱子移动 n 个盘子到目标柱子，利用辅助柱子来协助移动。\n该示例中默认情况下，汉诺塔的层数为 3，源柱子的名称为 ‘A’，目标柱子的名称为 ‘C’，辅助柱子的名称为 ‘B’。在调用 move() 函数时，传入这些参数即可开始游戏。\n运行示例程序，输出结果如下：\n\nA -> C\nA -> B\nC -> B\nA -> C\nB -> A\nB -> C\nA -> C\n\n以上输出是每一步的移动过程。您可以通过修改示例程序中的参数来改变汉诺塔的层数和柱子名称，以便更好地理解游戏的原理。\n"},{"title":"将整数换成文字1","url":"/2023/03/13/111/","content":"如果您想将用户从键盘输入的整数转换为文字表示，您可以使用Java的NumberFormat类或其他第三方库，例如Apache Commons Lang中的NumberUtils类。\n以下是使用Java的NumberFormat类实现此功能的示例代码：\nimport java.text.NumberFormat;import java.util.Scanner;\npublic class Main {    public static void main(String[] args) {        int number &#x3D; readIntegerFromConsole();        String numberInWords &#x3D; convertNumberToWords(number);        System.out.println(“您输入的整数是：” + numberInWords);    }\npublic static int readIntegerFromConsole() &#123;\n    Scanner scanner = new Scanner(System.in);\n    System.out.print(&quot;请输入一个整数：&quot;);\n    int number = scanner.nextInt();\n    return number;\n&#125;\n\npublic static String convertNumberToWords(int number) &#123;\n    NumberFormat format = NumberFormat.getInstance();\n    return format.format(number);\n&#125;\n\n}\n在上面的代码中，我们定义了一个名为convertNumberToWords的方法，该方法使用NumberFormat类将整数转换为文本表示。NumberFormat.getInstance()方法返回一个默认的NumberFormat对象，它可以将数字格式化为本地语言的文本表示形式。在这个示例中，我们将返回的文本表示直接作为字符串返回。\n在main方法中，我们首先使用readIntegerFromConsole方法读取用户输入的整数。然后，我们使用convertNumberToWords方法将整数转换为文本表示。最后，我们使用System.out.println方法打印出用户输入的整数的文本表示形式。\n请注意，使用NumberFormat类将整数转换为文本表示形式时，您可能需要在方法中处理NumberFormatException异常，以便在用户输入无效数字时进行错误处理。\n"},{"title":"title","url":"/2023/03/08/2/","content":""},{"title":"Hello World","url":"/2023/02/28/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"}]